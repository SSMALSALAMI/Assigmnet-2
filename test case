class Item:
    """
    Represents an item with an ID, name, description, and price.
    """

    def __init__(self, item_id, name, description, price):
        self._item_id = item_id
        self._name = name
        self._description = description
        self._price = price

    # Getters and Setters
    def get_item_id(self):
        return self._item_id

    def set_item_id(self, item_id):
        self._item_id = item_id

    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_description(self):
        return self._description

    def set_description(self, description):
        self._description = description

    def get_price(self):
        return self._price

    def set_price(self, price):
        self._price = price

    def __str__(self):
        return f"Item(item_id={self._item_id}, name={self._name}, description={self._description}, price={self._price})"
class EBook(Item):
    """
    Represents an e-book that inherits from the Item class.
    """

    def __init__(self, item_id, name, description, price, author, publication_date, genre):
        super().__init__(item_id, name, description, price)
        self._author = author
        self._publication_date = publication_date
        self._genre = genre

    # Getters and Setters for EBook-specific attributes
    def get_author(self):
        return self._author

    def set_author(self, author):
        self._author = author

    def get_publication_date(self):
        return self._publication_date

    def set_publication_date(self, publication_date):
        self._publication_date = publication_date

    def get_genre(self):
        return self._genre

    def set_genre(self, genre):
        self._genre = genre

    def __str__(self):
        return (f"EBook(item_id={self._item_id}, name={self._name}, description={self._description}, "
                f"price={self._price}, author={self._author}, "
                f"publication_date={self._publication_date}, genre={self._genre})")
class Customer:
    """
    Class representing a customer in the e-book store.
    """

    def __init__(self, name, contact_info, loyalty_member=False, account_creation_date=None):
        self._name = name
        self._contact_info = contact_info
        self._loyalty_member = loyalty_member
        self._account_creation_date = account_creation_date

    # Getters and Setters
    def get_name(self):
        return self._name

    def set_name(self, name):
        self._name = name

    def get_contact_info(self):
        return self._contact_info

    def set_contact_info(self, contact_info):
        self._contact_info = contact_info

    def is_loyalty_member(self):
        return self._loyalty_member

    def set_loyalty_member(self, loyalty_member):
        self._loyalty_member = loyalty_member

    def get_account_creation_date(self):
        return self._account_creation_date

    def set_account_creation_date(self, account_creation_date):
        self._account_creation_date = account_creation_date

    def __str__(self):
        status = "Loyalty Member" if self._loyalty_member else "Regular Customer"
        return f"Customer(name={self._name}, status={status})"
class ShoppingCart:
    """
    Represents a shopping cart holding multiple e-books.
    """

    def __init__(self):
        self._items = {}  # Dictionary of EBook objects and quantities
        self._total_price = 0.0

    # Getters and Setters
    def get_items(self):
        return self._items

    def set_items(self, items):
        self._items = items

    def get_total_price(self):
        return self._total_price

    def set_total_price(self, total_price):
        self._total_price = total_price

    # Cart operations
    def add_to_cart(self, ebook, quantity=1):
        if ebook in self._items:
            self._items[ebook] += quantity
        else:
            self._items[ebook] = quantity

    def remove_from_cart(self, ebook):
        if ebook in self._items:
            del self._items[ebook]

    def update_quantity(self, ebook, quantity):
        if ebook in self._items:
            self._items[ebook] = quantity

    def get_total(self):
        self._total_price = sum(ebook.get_price() * quantity for ebook, quantity in self._items.items())
        return self._total_price

    def __str__(self):
        return f"ShoppingCart(items={[(str(item), qty) for item, qty in self._items.items()]})"
class Discount:
    """
    A utility class for applying discounts and calculating VAT.
    """

    def __init__(self, loyalty_discount_rate=0.1, bulk_discount_rate=0.2, vat_rate=0.08):
        self._loyalty_discount_rate = loyalty_discount_rate
        self._bulk_discount_rate = bulk_discount_rate
        self._vat_rate = vat_rate

    # Getters and Setters
    def get_loyalty_discount_rate(self):
        return self._loyalty_discount_rate

    def set_loyalty_discount_rate(self, rate):
        self._loyalty_discount_rate = rate

    def get_bulk_discount_rate(self):
        return self._bulk_discount_rate

    def set_bulk_discount_rate(self, rate):
        self._bulk_discount_rate = rate

    def get_vat_rate(self):
        return self._vat_rate

    def set_vat_rate(self, rate):
        self._vat_rate = rate

    # Discount and VAT calculation methods
    def apply_loyalty_discount(self, amount):
        return amount * self._loyalty_discount_rate

    def apply_bulk_discount(self, amount):
        return amount * self._bulk_discount_rate

    def calculate_vat(self, amount):
        return amount * self._vat_rate
class Order:
    """
    Represents an order containing customer details, shopping cart, and applicable discounts.
    """

    def __init__(self, customer, shopping_cart, order_date, discount=None):
        self._customer = customer
        self._shopping_cart = shopping_cart
        self._order_date = order_date
        self._discounts = 0.0
        self._total = shopping_cart.get_total()
        self._discount = discount if discount else Discount()

    # Getters and Setters
    def get_customer(self):
        return self._customer

    def set_customer(self, customer):
        self._customer = customer

    def get_shopping_cart(self):
        return self._shopping_cart

    def set_shopping_cart(self, shopping_cart):
        self._shopping_cart = shopping_cart

    def get_order_date(self):
        return self._order_date

    def set_order_date(self, order_date):
        self._order_date = order_date

    def get_discounts(self):
        return self._discounts

    def set_discounts(self, discounts):
        self._discounts = discounts

    # Order operations
    def apply_discount(self):
        if self._customer.is_loyalty_member():
            self._discounts += self._discount.apply_loyalty_discount(self._total)
        if len(self._shopping_cart.get_items()) >= 5:
            self._discounts += self._discount.apply_bulk_discount(self._total)

    def calculate_total(self):
        discounted_total = self._total - self._discounts
        return discounted_total * (1 + self._discount.calculate_vat(discounted_total))

    def __str__(self):
        return f"Order(total={self.calculate_total()}, discounts={self._discounts})"
class Invoice:
    """
    Represents an invoice generated based on an order.
    """

    def __init__(self, order):
        self._order = order
        self._invoice_date = None
        self._total_with_tax = order.calculate_total()

    # Getters and Setters
    def get_order(self):
        return self._order

    def set_order(self, order):
        self._order = order

    def get_invoice_date(self):
        return self._invoice_date

    def set_invoice_date(self, invoice_date):
        self._invoice_date = invoice_date

    # Invoice generation
    def generate_invoice(self):
        return (
            f"Invoice for Order\n"
            f"Items: {self._order.get_shopping_cart()}\n"
            f"Subtotal: {self._order.get_shopping_cart().get_total()}\n"
            f"Discounts: {self._order.get_discounts()}\n"
            f"Total with VAT: {self._total_with_tax}"
        )

    def __str__(self):
        return self.generate_invoice()
def run_test_case():
    print("\n--- Customer Class Test ---")
    # Create a Customer with loyalty membership
    customer1 = Customer("Sulaiman", "suliman@information.com / 0502222222", True, "2024-01-15")
    print("Customer 1 Created:", customer1)
    print("Is Customer 1 a Loyalty Member?", "Yes" if customer1.is_loyalty_member() else "No")

    # Modify customer attributes
    customer1.set_name("Suliman Saif")
    print("Updated Customer 1 Name:", customer1.get_name())
    customer1.set_loyalty_member(False)
    print("Updated Loyalty Status for Customer 1:", "Loyalty Member" if customer1.is_loyalty_member() else "Regular Customer")

    # Create a Customer without loyalty membership
    customer2 = Customer("Ahmed", "ahmed@sample.com / 0501111111", False, "2024-02-10")
    print("Customer 2 Created:", customer2)
    print("Is Customer 2 a Loyalty Member?", "Yes" if customer2.is_loyalty_member() else "No")

    print("\n--- EBook Class Test (Inheritance from Item) ---")
    # Create EBooks
    ebook1 = EBook("E001", "Python Basics", "Beginner-friendly guide to Python", 20.0, "John Smith", "2023-01-10", "Programming")
    ebook2 = EBook("E002", "Advanced Python", "In-depth Python programming concepts", 25.0, "Jane Doe", "2023-02-20", "Programming")

    # Test EBook and inherited Item methods
    print("EBook 1 Created:", ebook1)
    print("EBook 1 Price:", ebook1.get_price())
    ebook1.set_price(22.0)
    print("Updated EBook 1 Price:", ebook1.get_price())
    print("EBook 1 Author:", ebook1.get_author())
    ebook1.set_author("Dr. John Smith")
    print("Updated EBook 1 Author:", ebook1.get_author())

    print("\n--- ShoppingCart Class Test ---")
    # Create ShoppingCart and add items
    cart = ShoppingCart()
    cart.add_to_cart(ebook1, 1)
    cart.add_to_cart(ebook2, 2)
    print("Cart Contents After Adding EBooks:", cart)

    # Update quantity and remove item
    cart.update_quantity(ebook2, 1)
    print("Cart Contents After Updating Quantity for EBook 2:", cart)
    cart.remove_from_cart(ebook1)
    print("Cart Contents After Removing EBook 1:", cart)
    print("Total Cart Price:", cart.get_total())

    print("\n--- Discount Class Test ---")
    # Test Discount methods
    discount = Discount()
    loyalty_discount = discount.apply_loyalty_discount(cart.get_total())
    print("Loyalty Discount on Cart Total:", loyalty_discount)
    bulk_discount = discount.apply_bulk_discount(cart.get_total())
    print("Bulk Discount on Cart Total:", bulk_discount)
    vat_amount = discount.calculate_vat(cart.get_total())
    print("VAT on Cart Total:", vat_amount)

    print("\n--- Order Class Test ---")
    # Create an Order
    order = Order(customer1, cart, "2024-11-06", discount)
    order.apply_discount()
    print("Order Details with Discounts Applied:", order)
    print("Order Total with VAT:", order.calculate_total())

    print("\n--- Invoice Class Test ---")
    # Generate an Invoice
    invoice = Invoice(order)
    invoice.set_invoice_date("2024-11-06")
    print("Invoice Generated:")
    print(invoice.generate_invoice())

# Run the test case
run_test_case()
